(async function(){try{const entry="/src/main.tsx";const resp=await fetch(entry);if(!resp.ok)return;const esbuildUrl="https://unpkg.com/esbuild-wasm@0.19.12/browser.min.js";const wasmUrl="https://unpkg.com/esbuild-wasm@0.19.12/esbuild.wasm";await new Promise((res,rej)=>{const s=document.createElement("script");s.src=esbuildUrl;s.onload=res;s.onerror=rej;document.head.appendChild(s)});if(!window.esbuild)return;await window.esbuild.initialize({wasmURL:wasmUrl});const plugin={name:"fetch-plugin",setup(build){build.onResolve({filter:/.*/},args=>{if(/^https?:\/\//.test(args.path))return{path:args.path,namespace:"http"};if(args.path.startsWith("/")||args.path.startsWith("./")||args.path.startsWith("../")){const url=new URL(args.path,location.origin+(args.path.startsWith("/")?"":location.pathname)).toString();return{path:url,namespace:"http"}}return{path:"https://esm.sh/"+args.path,namespace:"http"}});build.onLoad({filter:/.*/,namespace:"http"},async args=>{const r=await fetch(args.path);if(!r.ok)throw new Error("Fetch fail "+args.path);const t=await r.text();const ext=args.path.split("?")[0].split("#")[0].split(".").pop().toLowerCase();let loader="js";if(ext==="tsx")loader="tsx";else if(ext==="ts")loader="ts";else if(ext==="jsx")loader="jsx";else if(ext==="css")loader="css";else if(["png","jpg","jpeg","gif","webp","svg"].includes(ext))loader="dataurl";return{contents:t,loader}})}};const result=await window.esbuild.build({entryPoints:[entry],bundle:true,write:false,format:"esm",plugins:[plugin],loader:{".tsx":"tsx",".ts":"ts",".jsx":"jsx",".css":"css",".png":"dataurl",".jpg":"dataurl",".jpeg":"dataurl",".gif":"dataurl",".webp":"dataurl",".svg":"dataurl"}});const js=result.outputFiles[0].text;const blob=new Blob([js],{type:"text/javascript"});const url=URL.createObjectURL(blob);await import(url);URL.revokeObjectURL(url);console.info("[PBP] TSX boot OK")}catch(e){console.error("[PBP] TSX boot failed",e)}})();